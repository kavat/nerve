import os
import base64

def get_base64_file(nome_file):
  with open(nome_file, "rb") as file_bin:
    return base64.b64encode(file_bin.read()).decode('utf-8')

CVE_SCAN_SERVICE_HOST = "172.17.0.2"
CVE_SCAN_SERVICE_PORT = 5000
CVE_SCAN_USE_THREADS = 0
CVE_SCAN_MAX_THREADS = 5
PROFILE_SERVICE_HOST = "172.17.0.3"
PROFILE_SERVICE_PORT = 5000
SESSION_MAX_CHECKS = 120
SESSION_TIME_SLEEP_CHECK = 30

# Logger Configuration
LOG_LEVEL = 'DEBUG'

# Webserver Configuration
WEB_HOST = '0.0.0.0'
WEB_PORT = 8080
WEB_DEBUG = False
WEB_USER = os.environ.get('username', 'admin')
WEB_PASSW = os.environ.get('password', 'admin')
WEB_LOG = 'nerve.log'

# Web Security
# Setting this to True will return all responses with security headers.
WEB_SECURITY = True
WEB_SEC_HEADERS = {
  'CSP':'default-src \'self\' \'unsafe-inline\'; object-src \'none\'; img-src \'self\' data:',
  'CTO':'nosniff',
  'XSS':'1; mode=block',
  'XFO':'DENY',
  'RP':'no-referrer',
  'Server':'NERVE'
}

# Maximum allowed attempts before banning the remote origin
MAX_LOGIN_ATTEMPTS = 3

# Redis Configuration
# This should not be set to anything else except localhost unless you want to do a multi-node deployment.
RDS_HOST = '127.0.0.1'
RDS_PORT = 6379
RDS_PASSW = None

# Scan Configuration
USER_AGENT = 'NERVE'

PATH_NERVE_SCRIPTS = '/opt/nerve/scripts'

# COMMAND FOR OS RPM BASED TO LIST ALL SHARED LIBRARIES RELATED TO A SOFTWARES AND SOFTWARES WITH A TCP OR UDP STREAM EXPOSED
CPE_GENERATION_RPM = "echo {} | base64 -d | bash | xargs echo -n".format(get_base64_file(PATH_NERVE_SCRIPTS + "/check_packages_rpm.sh"))
CPE_GENERATION_RPM_OLD = 'echo IyBSRVNFVCBURU1QIEZJTEVTCj4gL3RtcC9hcHBvZ2dpbwo+IC90bXAvcml0b3JubwoKZm9yIHByb3RvY29sIGluIHRjcCB1ZHA7IGRvCgogICMgR0VUIElOT0RFIElOIE9SREVSIFRPIENIRUNLIFNQRUNJRklDIFBST0NFU1MKICBmb3IgSU5PREUgaW4gJChjYXQgL3Byb2MvbmV0LyRwcm90b2NvbCB8IGdyZXAgLXYgcmVtX2FkZHJlc3MgfCBncmVwICIgMFsgXVwrJCIgfCBhd2sgLUYnICcgJ3twcmludCAkMTB9Jyk7IGRvCgogICAgaXBfYmluZGluZ19mb3JfaW5vZGU9JChjYXQgL3Byb2MvbmV0LyRwcm90b2NvbCB8IGdyZXAgIiAwWyBdXCskIiB8IGdyZXAgIiAkSU5PREUgIiB8IGF3ayAtRicgJyAne3ByaW50ICQyfScgfCBhd2sgLUYiOiIgJ3twcmludCAkMX0nKQogICAgdHlwZV92dWxuPSJpbnRlcm5hbCIKICAgIGlmIFsgIiRpcF9iaW5kaW5nX2Zvcl9pbm9kZSIgIT0gIjAxMDAwMDdGIiBdICYmIFsgIiRpcF9iaW5kaW5nX2Zvcl9pbm9kZSIgIT0gIjdGMDAwMDAxIiBdICYmIFsgIiRpcF9iaW5kaW5nX2Zvcl9pbm9kZSIgIT0gIjM1MDAwMDdGIiBdICYmIFsgIiRpcF9iaW5kaW5nX2Zvcl9pbm9kZSIgIT0gIjdGMDAwMDM1IiBdOyB0aGVuCiAgICAgIHR5cGVfdnVsbj0iZXh0ZXJuYWwiCiAgICBmaQoKICAgICMgTElCUkFSSUVTIFJFTEFURUQgVE8gU1BFQ0lGSUMgSU5PREUKICAgIGxpYnJlcmllPSQoZmluZCAvcHJvYyAtbG5hbWUgInNvY2tldDpcXFskSU5PREVcXF0iIDI+L2Rldi9udWxsIHwgaGVhZCAtbiAxIHwgYXdrIC1GICIvIiAne3ByaW50ICJjYXQgL3Byb2MvIiQzIi9tYXBzIn0nIHwgYmFzaCB8IGdyZXAgIlwuc28iIHwgYXdrIC1GJyAnICd7cHJpbnQgJDZ9JyB8IHNvcnQgLXUpCiAgICBmb3IgbGlicmVyaWEgaW4gJGxpYnJlcmllOyBkbwogICAgICBmb3IgZmlsZV9yZXR1cm5lZCBpbiAkKHJwbSAtLXF1ZXJ5Zm9ybWF0ICIle05BTUV9OiV7VkVSU0lPTn1cbiIgLXFmICRsaWJyZXJpYSk7IGRvCiAgICAgICAgZWNobyAiJHt0eXBlX3Z1bG59O3VzZWQ7JHtmaWxlX3JldHVybmVkfSIgPj4gL3RtcC9hcHBvZ2dpbwogICAgICBkb25lCiAgICBkb25lCgogICAgIyBPUiBMSU5LRUQgTElCUkFSSUVTIFJFTEFURUQgVE8gU1BFQ0lGIElOT0RFCiAgICBmb3IgbGlicmVyaWEgaW4gJGxpYnJlcmllOyBkbwogICAgICBmb3IgbGlicmVyaWFfbGlua2VkIGluICQoZmluZCAvIC10eXBlIGwgLW5hbWUgJGxpYnJlcmlhIDI+L2Rldi9udWxsIHwgYXdrIC1GJyAnICd7cHJpbnQgImxzIC1sICIkMX0nIHwgYmFzaCB8IGF3ayAne3ByaW50ICRORn0nKTsgZG8KICAgICAgICBmb3IgZmlsZV9yZXR1cm5lZCBpbiAkKHJwbSAtLXF1ZXJ5Zm9ybWF0ICIle05BTUV9OiV7VkVSU0lPTn1cbiIgLXFmICRsaWJyZXJpYV9saW5rZWQpOyBkbwogICAgICAgICAgZWNobyAiJHt0eXBlX3Z1bG59O3VzZWQ7JHtmaWxlX3JldHVybmVkfSIgPj4gL3RtcC9hcHBvZ2dpbwogICAgICAgIGRvbmUKICAgICAgZG9uZQogICAgZG9uZQoKICAgICMgRklMRVMgQ0FOIEJFIERJUkVDVExZIEVYRUNVVEFCTEVTCiAgICBzb2Z0d2FyZXM9JChmaW5kIC9wcm9jIC1sbmFtZSAic29ja2V0OlxcWyRJTk9ERVxcXSIgMj4vZGV2L251bGwgfCBoZWFkIC1uIDEgfCBhd2sgLUYgIi8iICd7cHJpbnQgImNhdCAvcHJvYy8iJDMiL2NvbW0ifScgfCBiYXNoKQogICAgZm9yIHNvZnR3YXJlIGluICRzb2Z0d2FyZXM7IGRvCiAgICAgIGZvciBmaWxlX3JldHVybmVkIGluICQoZmluZCAvIC10eXBlIGYgLWV4ZWN1dGFibGUgLW5hbWUgJHNvZnR3YXJlIDI+L2Rldi9udWxsfCBhd2sgLUYnICcgJ3twcmludCAicnBtIC0tcXVlcnlmb3JtYXQgXCIle05BTUV9OiV7VkVSU0lPTn1cXG5cIiAtcWYgIiQxfScgfCBiYXNoKTsgZG8KICAgICAgICBlY2hvICIke3R5cGVfdnVsbn07ZXhlY3V0YWJsZTske2ZpbGVfcmV0dXJuZWR9IiA+PiAvdG1wL2FwcG9nZ2lvCiAgICAgIGRvbmUKICAgIGRvbmUgIAoKICAgICMgT1IgTElOS1MgQSBTUEVDSUZJQyBFWEVDVVRBQkxFIEZJTEVTCiAgICBmb3Igc29mdHdhcmUgaW4gJHNvZnR3YXJlczsgZG8KICAgICAgZm9yIHNvZnR3YXJlX2xpbmtlZCBpbiAkKGZpbmQgLyAtdHlwZSBsIC1uYW1lICRzb2Z0d2FyZSAyPi9kZXYvbnVsbCB8IGF3ayAtRicgJyAne3ByaW50ICJscyAtbCAiJDF9JyB8IGJhc2ggfCBhd2sgJ3twcmludCAkTkZ9Jyk7IGRvCiAgICAgICAgZm9yIGZpbGVfcmV0dXJuZWQgaW4gJChmaW5kIC8gLXR5cGUgZiAtZXhlY3V0YWJsZSAtbmFtZSAkc29mdHdhcmVfbGlua2VkIDI+L2Rldi9udWxsfCBhd2sgLUYnICcgJ3twcmludCAicnBtIC0tcXVlcnlmb3JtYXQgXCIle05BTUV9OiV7VkVSU0lPTn1cXG5cIiAtcWYgIiQxfScgfCBiYXNoKTsgZG8KICAgICAgICAgIGVjaG8gIiR7dHlwZV92dWxufTtleGVjdXRhYmxlOyR7ZmlsZV9yZXR1cm5lZH0iID4+IC90bXAvYXBwb2dnaW8KICAgICAgICBkb25lCiAgICAgIGRvbmUKICAgIGRvbmUKCiAgZG9uZQoKZG9uZQoKZm9yIHJpZ2EgaW4gJChjYXQgL3RtcC9hcHBvZ2dpbyB8IGdyZXAgIlteOl1cK1w6WzAtOVwuXVwrIiAtbyB8IHNlZCAicy9cLiQvL2ciIHwgc29ydCAtdSk7IGRvCgogIHR5cGVfdnVsbj0kKGVjaG8gJHJpZ2EgfCBhd2sgLUYnOycgJ3twcmludCAkMX0nKQogIHR5cGVfcGFja2FnZT0kKGVjaG8gJHJpZ2EgfCBhd2sgLUYnOycgJ3twcmludCAkMn0nKQogIHBhY2NoZXR0bz0kKGVjaG8gJHJpZ2EgfCBhd2sgLUYnOycgJ3twcmludCAkM30nIHwgYXdrIC1GJzonICd7cHJpbnQgJDF9JykKICB2ZXJzaW9uPSQoZWNobyAkcmlnYSB8IGF3ayAtRic7JyAne3ByaW50ICQzfScgfCBhd2sgLUYnOicgJ3twcmludCAkMn0nKQoKICB1c2FiaWxpdHk9JChncmVwICI7JHtwYWNjaGV0dG99OiR7dmVyc2lvbn0iIC90bXAvYXBwb2dnaW8gfCBhd2sgLUYnOycgJ3twcmludCAkMSI7IiQyfScgfCBzb3J0IC11IHwgaGVhZCAtbjEpCiAgZWNobyAiJHt1c2FiaWxpdHl9OyR7cGFjY2hldHRvfToke3ZlcnNpb259IiA+PiAvdG1wL3JpdG9ybm8KCmRvbmUKCmNhdCAvdG1wL3JpdG9ybm8gfCBncmVwICJbXjpdXCtcOlswLTlcLl1cKyIgLW8gfCBzZWQgInMvXC4kLy9nIiB8IHNvcnQgLXUgfCBzZWQgInMvZXh0ZXJuYWw7dXNlZC9leHRlcm5hbF91c2VkL2ciIHwgc2VkICJzL2V4dGVybmFsO2V4ZWN1dGFibGUvZXh0ZXJuYWxfZXhlY3V0YWJsZS9nIiB8IHNlZCAicy9pbnRlcm5hbDt1c2VkL2ludGVybmFsX3VzZWQvZyIgfCBzZWQgInMvaW50ZXJuYWw7ZXhlY3V0YWJsZS9pbnRlcm5hbF9leGVjdXRhYmxlL2ciCg==  | base64 -d | bash | xargs echo -n'

# COMMAND FOR OS DEB BASED TO LIST ALL SHARED LIBRARIES RELATED TO A SOFTWARES AND SOFTWARES WITH A TCP OR UDP STREAM EXPOSED
CPE_GENERATION_DPKG = "echo {} | base64 -d | bash | xargs echo -n".format(get_base64_file(PATH_NERVE_SCRIPTS + "/check_packages_deb.sh"))
CPE_GENERATION_DPKG_OLD = 'echo IyBSRVNFVCBURU1QIEZJTEVTCj4gL3RtcC9hcHBvZ2dpbwo+IC90bXAvcml0b3JubwoKZm9yIHByb3RvY29sIGluIHRjcCB1ZHA7IGRvCgoKICAjIEdFVCBJTk9ERSBJTiBPUkRFUiBUTyBDSEVDSyBTUEVDSUZJQyBQUk9DRVNTCiAgZm9yIElOT0RFIGluICQoY2F0IC9wcm9jL25ldC8kcHJvdG9jb2wgfCBncmVwIC12IHJlbV9hZGRyZXNzIHwgZ3JlcCAiIDBbIF1cKyQiIHwgYXdrIC1GJyAnICd7cHJpbnQgJDEwfScpOyBkbyAKCiAgICBpcF9iaW5kaW5nX2Zvcl9pbm9kZT0kKGNhdCAvcHJvYy9uZXQvJHByb3RvY29sIHwgZ3JlcCAiIDBbIF1cKyQiIHwgZ3JlcCAiICRJTk9ERSAiIHwgYXdrIC1GJyAnICd7cHJpbnQgJDJ9JyB8IGF3ayAtRiI6IiAne3ByaW50ICQxfScpCiAgICB0eXBlX3Z1bG49ImludGVybmFsIgogICAgaWYgWyAiJGlwX2JpbmRpbmdfZm9yX2lub2RlIiAhPSAiMDEwMDAwN0YiIF0gJiYgWyAiJGlwX2JpbmRpbmdfZm9yX2lub2RlIiAhPSAiN0YwMDAwMDEiIF0gJiYgWyAiJGlwX2JpbmRpbmdfZm9yX2lub2RlIiAhPSAiMzUwMDAwN0YiIF0gJiYgWyAiJGlwX2JpbmRpbmdfZm9yX2lub2RlIiAhPSAiN0YwMDAwMzUiIF07IHRoZW4KICAgICAgdHlwZV92dWxuPSJleHRlcm5hbCIKICAgIGZpCgogICAgIyBMSUJSQVJJRVMgUkVMQVRFRCBUTyBTUEVDSUZJQyBJTk9ERQogICAgbGlicmVyaWU9JChmaW5kIC9wcm9jIC1sbmFtZSAic29ja2V0OlxcWyRJTk9ERVxcXSIgMj4vZGV2L251bGwgfCBoZWFkIC1uIDEgfCBhd2sgLUYgIi8iICd7cHJpbnQgImNhdCAvcHJvYy8iJDMiL21hcHMifScgfCBiYXNoIHwgZ3JlcCAiXC5zbyIgfCBhd2sgLUYnICcgJ3twcmludCAkNn0nIHwgYXdrIC1GJy8nICd7cHJpbnQgJE5GfScgfCBzb3J0IC11KQogICAgZm9yIGxpYnJlcmlhIGluICRsaWJyZXJpZTsgZG8KICAgICAgZm9yIGZpbGVfcmV0dXJuZWQgaW4gJChkcGtnIC1TICRsaWJyZXJpYSB8IGF3ayAtRic6JyAne3ByaW50ICQxfScgfCBzb3J0IC11IHwgYXdrIC1GJyAnICd7cHJpbnQgImRwa2ctcXVlcnkgLVcgIiQxfScgfCBiYXNoIHwgc2VkICJzL1tcdCBdXCsvX19fL2ciKTsgZG8KICAgICAgICBlY2hvICIke3R5cGVfdnVsbn07dXNlZDske2ZpbGVfcmV0dXJuZWR9IiA+PiAvdG1wL2FwcG9nZ2lvCiAgICAgIGRvbmUKICAgIGRvbmUKCiAgICAjIE9SIExJTktFRCBMSUJSQVJJRVMgUkVMQVRFRCBUTyBTUEVDSUYgSU5PREUKICAgIGZvciBsaWJyZXJpYSBpbiAkbGlicmVyaWU7IGRvCiAgICAgIGZvciBsaWJyZXJpYV9saW5rZWQgaW4gJChmaW5kIC8gLXR5cGUgbCAtbmFtZSAkbGlicmVyaWEgMj4vZGV2L251bGwgfCBhd2sgLUYnICcgJ3twcmludCAibHMgLWwgIiQxfScgfCBiYXNoIHwgYXdrICd7cHJpbnQgJE5GfScpOyBkbwogICAgICAgIGZvciBmaWxlX3JldHVybmVkIGluICQoZHBrZyAtUyAkbGlicmVyaWFfbGlua2VkIHwgYXdrIC1GJzonICd7cHJpbnQgJDF9JyB8IHNvcnQgLXUgfCBhd2sgLUYnICcgJ3twcmludCAiZHBrZy1xdWVyeSAtVyAiJDF9JyB8IGJhc2ggfCBzZWQgInMvW1x0IF1cKy9fX18vZyIpOyBkbwogICAgICAgICAgZWNobyAiJHt0eXBlX3Z1bG59O3VzZWQ7JHtmaWxlX3JldHVybmVkfSIgPj4gL3RtcC9hcHBvZ2dpbwogICAgICAgIGRvbmUKICAgICAgZG9uZQogICAgZG9uZQoKICAgICMgRklMRVMgQ0FOIEJFIERJUkVDVExZIEVYRUNVVEFCTEVTCiAgICBzb2Z0d2FyZXM9JChmaW5kIC9wcm9jIC1sbmFtZSAic29ja2V0OlxcWyRJTk9ERVxcXSIgMj4vZGV2L251bGwgfCBoZWFkIC1uIDEgfCBhd2sgLUYgIi8iICd7cHJpbnQgImNhdCAvcHJvYy8iJDMiL2NvbW0ifScgfCBiYXNoKQogICAgZm9yIHNvZnR3YXJlIGluICRzb2Z0d2FyZXM7IGRvCiAgICAgIGZvciBmaWxlX3JldHVybmVkIGluICQoZmluZCAvIC10eXBlIGYgLWV4ZWN1dGFibGUgLW5hbWUgJHNvZnR3YXJlIDI+L2Rldi9udWxsfCBhd2sgLUYnICcgJ3twcmludCAiZHBrZy1xdWVyeSAtUyAiJDF9JyB8IGJhc2ggfCBhd2sgLUYnOicgJ3twcmludCAkMX0nIHwgc29ydCAtdXwgYXdrIC1GJyAnICd7cHJpbnQgImRwa2ctcXVlcnkgLVcgIiQxfScgfCBiYXNoIHwgc2VkICJzL1tcdCBdXCsvX19fL2ciKTsgZG8KICAgICAgICBlY2hvICIke3R5cGVfdnVsbn07ZXhlY3V0YWJsZTske2ZpbGVfcmV0dXJuZWR9IiA+PiAvdG1wL2FwcG9nZ2lvCiAgICAgIGRvbmUKICAgIGRvbmUKCiAgICAjIE9SIExJTktTIEEgU1BFQ0lGSUMgRVhFQ1VUQUJMRSBGSUxFUwogICAgZm9yIHNvZnR3YXJlIGluICRzb2Z0d2FyZXM7IGRvCiAgICAgIGZvciBzb2Z0d2FyZV9saW5rZWQgaW4gJChmaW5kIC8gLXR5cGUgbCAtbmFtZSAkc29mdHdhcmUgMj4vZGV2L251bGwgfCBhd2sgLUYnICcgJ3twcmludCAibHMgLWwgIiQxfScgfCBiYXNoIHwgYXdrICd7cHJpbnQgJE5GfScpOyBkbwogICAgICAgIGZvciBmaWxlX3JldHVybmVkIGluICQoZmluZCAvIC10eXBlIGYgLWV4ZWN1dGFibGUgLW5hbWUgJHNvZnR3YXJlX2xpbmtlZCAyPi9kZXYvbnVsbHwgYXdrIC1GJyAnICd7cHJpbnQgImRwa2ctcXVlcnkgLVMgIiQxfScgfCBiYXNoIHwgYXdrIC1GJzonICd7cHJpbnQgJDF9JyB8IHNvcnQgLXV8IGF3ayAtRicgJyAne3ByaW50ICJkcGtnLXF1ZXJ5IC1XICIkMX0nIHwgYmFzaCB8IHNlZCAicy9bXHQgXVwrL19fXy9nIik7IGRvCiAgICAgICAgICBlY2hvICIke3R5cGVfdnVsbn07ZXhlY3V0YWJsZTske2ZpbGVfcmV0dXJuZWR9IiA+PiAvdG1wL2FwcG9nZ2lvCiAgICAgICAgZG9uZQogICAgICBkb25lCiAgICBkb25lCgogIGRvbmUgCgpkb25lCgpjYXQgL3RtcC9hcHBvZ2dpbyB8IHNlZCAicy9cOlwoLipcKV9fXy9fX18vZyIgfCBzZWQgInMvX19fW15cOl1cK1w6L19fXy9nIiB8IGdyZXAgIlwoLipcKV9fX1swLTlcLl1cKyIgLW8gfCBzZWQgInMvXC4kLy9nIiB8IHNlZCAicy9fX18vXDovZyIgfCBzb3J0IC11ID4gL3RtcC9hcHBvZ2dpb19hc19ycG0KCmZvciByaWdhIGluICQoY2F0IC90bXAvYXBwb2dnaW9fYXNfcnBtKTsgZG8KCiAgdHlwZV92dWxuPSQoZWNobyAkcmlnYSB8IGF3ayAtRic7JyAne3ByaW50ICQxfScpCiAgdHlwZV9wYWNrYWdlPSQoZWNobyAkcmlnYSB8IGF3ayAtRic7JyAne3ByaW50ICQyfScpCiAgcGFjY2hldHRvPSQoZWNobyAkcmlnYSB8IGF3ayAtRic7JyAne3ByaW50ICQzfScgfCBhd2sgLUYnOicgJ3twcmludCAkMX0nKQogIHZlcnNpb249JChlY2hvICRyaWdhIHwgYXdrIC1GJzsnICd7cHJpbnQgJDN9JyB8IGF3ayAtRic6JyAne3ByaW50ICQyfScpCgogIHVzYWJpbGl0eT0kKGdyZXAgIjske3BhY2NoZXR0b306JHt2ZXJzaW9ufSIgL3RtcC9hcHBvZ2dpb19hc19ycG0gfCBhd2sgLUYnOycgJ3twcmludCAkMSI7IiQyfScgfCBzb3J0IC11IHwgaGVhZCAtbjEpCiAgZWNobyAiJHt1c2FiaWxpdHl9OyR7cGFjY2hldHRvfToke3ZlcnNpb259IiA+PiAvdG1wL3JpdG9ybm8KCmRvbmUKCmNhdCAvdG1wL3JpdG9ybm8gfCBncmVwICJbXjpdXCtcOlswLTlcLl1cKyIgLW8gfCBzZWQgInMvXC4kLy9nIiB8IHNvcnQgLXUgfCBzZWQgInMvZXh0ZXJuYWw7dXNlZC9leHRlcm5hbF91c2VkL2ciIHwgc2VkICJzL2V4dGVybmFsO2V4ZWN1dGFibGUvZXh0ZXJuYWxfZXhlY3V0YWJsZS9nIiB8IHNlZCAicy9pbnRlcm5hbDt1c2VkL2ludGVybmFsX3VzZWQvZyIgfCBzZWQgInMvaW50ZXJuYWw7ZXhlY3V0YWJsZS9pbnRlcm5hbF9leGVjdXRhYmxlL2ciCg== | base64 -d | bash | xargs echo -n'

# Default scan configuration
# This will be used in the "Quick Start" scan.
DEFAULT_SCAN = {
  'type':'network',
  'ip_peer_static':'10.0.2.2',
  'type_ie':'external',
  'targets':{
    'networks':[],
    'excluded_networks':[],
    'domains':[]
  },
  'config':{
    'name':'Default',
    'description':'My Default Scan',
    'engineer':'Andrea',
    'allow_aggressive':3,
    'allow_dos':False,
    'allow_bf':False,
    'allow_internet':True,
    'dictionary':{
      'usernames':[],
      'passwords':[]
    },
    'scan_opts':{
      'interface':None,
      'max_ports':100,
      'custom_ports':[],
      'parallel_scan':50,
      'parallel_attack':30,
    },
    'post_event':{
      'webhook':None
    },
    'frequency':'once'
  }
}

UPLOAD_FOLDER = '/tmp'
MAX_CONTENT_PATH = 1000000000
